{"version":3,"sources":["components/CounterDisplay/CounterDisplay.module.scss","components/CustomButton/CustomButton.module.scss","components/Counter2/Counter2.module.scss","reportWebVitals.ts","components/Navbar/Navbar.tsx","components/CustomButton/CustomButton.tsx","components/CounterDisplay/CounterDisplay.tsx","components/CounterSettings/CounterSettings.tsx","components/Counter2/Counter2.tsx","components/Counter21.tsx","App.tsx","index.tsx","components/Navbar/Navbar.module.scss","components/CounterSettings/CounterSettings.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","className","s","navbar","navItem","to","activeClassName","active","CustomButton","props","button","onClick","disabled","title","CounterDisplay","useState","valueClass","setValueClass","isIncButtonDisabled","setIsIncButtonDisabled","isResetButtonDisabled","setIsResetButtonDisabled","history","useHistory","useEffect","isError","maxValue","value","isMessage","redValueColor","startValue","messageText","incButtonHandler","setValue","resetButtonHandler","type","push","CounterSettings","errorClsSV","error","errorClsBoth","sText","onChange","e","maxValueHandler","currentTarget","valueAsNumber","startValueHandler","setValuesByButton","Counter2","container","Counter21","setValuesByButtonHandler","exact","path","render","App","setStartValue","setMaxValue","setIsMessage","setIsError","localStorageStartValueStr","localStorage","getItem","localStorageMaxValueStr","JSON","parse","setValuesHandler","setItem","stringify","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0d2954bb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"value\":\"CounterDisplay_value__3MlV1\",\"redValueColor\":\"CounterDisplay_redValueColor__hhuOz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"CustomButton_button__124Wy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Counter2_container__33rDu\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Navbar.module.scss'\r\n\r\nexport function Navbar() {\r\n  return (\r\n    <div className={s.navbar}>\r\n      <div className={s.navItem}>\r\n        <NavLink to=\"/counter2\" activeClassName={s.active}>Counter 2</NavLink>\r\n      </div>\r\n      <div className={s.navItem}>\r\n        <NavLink to=\"/counter2.1\" activeClassName={s.active}>Counter 2.1</NavLink>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}","import React from 'react';\r\nimport s from './CustomButton.module.scss'\r\n\r\ntype ButtonPropsType = {\r\n  title: string\r\n  disabled: boolean\r\n  onClick: () => void\r\n}\r\n\r\nexport function CustomButton(props: ButtonPropsType) {\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        className={s.button}\r\n        onClick={props.onClick}\r\n        disabled={props.disabled}\r\n      >{props.title}</button>\r\n    </div>\r\n  )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport s from './CounterDisplay.module.scss'\r\nimport '../../App.scss'\r\nimport {CustomButton} from '../CustomButton/CustomButton';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\ntype CounterDisplayPropsType = {\r\n  type: 'Counter2' | 'Counter21'\r\n  startValue: number\r\n  maxValue: number\r\n  value: number\r\n  setValue: (value: number) => void\r\n  isMessage: boolean\r\n  isError: boolean\r\n}\r\n\r\nexport function CounterDisplay(props: CounterDisplayPropsType) {\r\n\r\n  let [valueClass, setValueClass] = useState('') // для разных цветов значения\r\n  let [isIncButtonDisabled, setIsIncButtonDisabled] = useState(false) //блокировка inc кнопки\r\n  let [isResetButtonDisabled, setIsResetButtonDisabled] = useState(false) //блокировка reset кнопки\r\n  const history = useHistory() //для изменение адреса\r\n\r\n  // Формирование разных цветов счётчика по условиям\r\n  useEffect(() => {\r\n    if (props.isError || (props.maxValue === props.value && !props.isMessage)) {\r\n      setValueClass(s.redValueColor)\r\n    } else {\r\n      setValueClass('')\r\n    }\r\n  }, [props.isMessage, props.isError, props.value, props.maxValue, setValueClass])\r\n\r\n  // блокировка кнопок Inc и Reset по условиям\r\n  useEffect(() => {\r\n      if (props.isMessage) {\r\n        setIsIncButtonDisabled(true)\r\n        setIsResetButtonDisabled(true)\r\n      } else if (props.value === props.startValue) {\r\n        setIsIncButtonDisabled(false)\r\n        setIsResetButtonDisabled(true)\r\n      } else if (props.maxValue === props.value) {\r\n        setIsIncButtonDisabled(true)\r\n        setIsResetButtonDisabled(false)\r\n      } else {\r\n        setIsIncButtonDisabled(false)\r\n        setIsResetButtonDisabled(false)\r\n      }\r\n    },\r\n    [props.isMessage, props.value, props.startValue, props.maxValue])\r\n\r\n  // разные сообщения в зависимости от наличия ошибки\r\n  let messageText = (props.isError) ? 'Incorrect value!' : 'enter values and press set'\r\n\r\n  //увеличить счётчик на один вверх\r\n  const incButtonHandler = () => {\r\n    props.setValue(props.value + 1)\r\n  }\r\n\r\n  //сбросить счётчик\r\n  const resetButtonHandler = () => {\r\n    props.setValue(props.startValue);\r\n  }\r\n\r\n  // set для Counter 2.1\r\n  const setButtonHandler = () => {\r\n    history.push('/counter2.1/settings')\r\n  }\r\n\r\n  if (props.type === 'Counter2') {\r\n    return (\r\n      <div className='mainContainer'>\r\n        <div className='valueContainer'>\r\n        <span className={`${s.value} ${valueClass}`}>\r\n          {props.isMessage ? messageText : props.value}\r\n        </span>\r\n        </div>\r\n        <div className='buttonContainer'>\r\n          <CustomButton title=\"inc\" disabled={isIncButtonDisabled} onClick={incButtonHandler}/>\r\n          <CustomButton title=\"reset\" disabled={isResetButtonDisabled} onClick={resetButtonHandler}/>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else if (props.type === 'Counter21') {\r\n    return (\r\n      <div className='mainContainer'>\r\n        <div className='valueContainer'>\r\n        <span className={`${s.value} ${valueClass}`}>\r\n          {props.isMessage ? messageText : props.value}\r\n        </span>\r\n        </div>\r\n        <div className='buttonContainer'>\r\n          <CustomButton title=\"inc\" disabled={isIncButtonDisabled} onClick={incButtonHandler}/>\r\n          <CustomButton title=\"reset\" disabled={isResetButtonDisabled} onClick={resetButtonHandler}/>\r\n          <CustomButton title=\"set\" disabled={false} onClick={setButtonHandler}/>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else {\r\n    return <div>no type defined</div>\r\n  }\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {CustomButton} from '../CustomButton/CustomButton';\r\nimport './../../App.scss'\r\nimport s from './CounterSettings.module.css'\r\n\r\ntype CounterSettingsPropsType = {\r\n  startValue: number\r\n  startValueHandler: (startValue: number) => void\r\n  maxValue: number\r\n  maxValueHandler: (maxValue: number) => void\r\n  value: number\r\n  setValuesByButton: () => void\r\n  isError: boolean\r\n}\r\n\r\nexport function CounterSettings(props: CounterSettingsPropsType) {\r\n  // handlers for settings\r\n  const onChangeMaxHandler = (e: ChangeEvent<HTMLInputElement> ) => {\r\n    props.maxValueHandler(e.currentTarget.valueAsNumber)\r\n  }\r\n  const onChangeStartHandler = (e: ChangeEvent<HTMLInputElement> ) => {\r\n    props.startValueHandler(e.currentTarget.valueAsNumber)\r\n  }\r\n\r\n  //формирование красной подсветки input в случае ошибок\r\n  let errorClsSV = (props.startValue < 0) ? s.error : '';\r\n  let errorClsBoth = (props.startValue >= props.maxValue) ? s.error : '';\r\n\r\n  return (\r\n    <div className='mainContainer'>\r\n      <div className='valueContainer'>\r\n        <div className={s.sText}>\r\n          <span>max value:</span>\r\n          <input className={errorClsBoth}\r\n                 type=\"number\"\r\n                 value={props.maxValue}\r\n                 onChange={onChangeMaxHandler}\r\n          />\r\n        </div>\r\n        <div className={s.sText}>\r\n          <span>start value:</span>\r\n          <input className={`${errorClsSV} ${errorClsBoth}`}\r\n                 type=\"number\"\r\n                 value={props.startValue}\r\n                 onChange={onChangeStartHandler}\r\n          />\r\n        </div>\r\n\r\n      </div>\r\n      <div className='buttonContainer'>\r\n        <CustomButton title='Set'\r\n                      disabled={props.isError}\r\n                      onClick={props.setValuesByButton} />\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport {CounterDisplay} from '../CounterDisplay/CounterDisplay';\r\nimport {CounterSettings} from '../CounterSettings/CounterSettings';\r\nimport s from './Counter2.module.scss'\r\n\r\ntype Counter2PropsType = {\r\n  startValue: number\r\n  maxValue: number\r\n  value: number\r\n  setValue: (value: number) => void\r\n  isMessage: boolean\r\n  isError: boolean\r\n  startValueHandler: (startValue: number) => void\r\n  maxValueHandler: (maxValue: number) => void\r\n  setValuesByButton: () => void\r\n}\r\n\r\nexport function Counter2(props: Counter2PropsType) {\r\n  return (\r\n    <div className={s.container}>\r\n      <CounterSettings startValue={props.startValue}\r\n                       startValueHandler={props.startValueHandler}\r\n                       maxValue={props.maxValue}\r\n                       maxValueHandler={props.maxValueHandler}\r\n                       value={props.value}\r\n                       setValuesByButton={props.setValuesByButton}\r\n                       isError={props.isError}\r\n      />\r\n      <CounterDisplay type={'Counter2'}\r\n                      startValue={props.startValue}\r\n                      maxValue={props.maxValue}\r\n                      value={props.value}\r\n                      setValue={props.setValue}\r\n                      isMessage={props.isMessage}\r\n                      isError={props.isError}\r\n      />\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport {Route, useHistory} from 'react-router-dom';\r\nimport {CounterSettings} from './CounterSettings/CounterSettings';\r\nimport {CounterDisplay} from './CounterDisplay/CounterDisplay';\r\n\r\ntype Counter21PropsType = {\r\n  startValue: number\r\n  maxValue: number\r\n  value: number\r\n  setValue: (value: number) => void\r\n  isMessage: boolean\r\n  isError: boolean\r\n  startValueHandler: (startValue: number) => void\r\n  maxValueHandler: (maxValue: number) => void\r\n  setValuesByButton: () => void\r\n}\r\n\r\nexport function Counter21(props: Counter21PropsType) {\r\n\r\n  const history = useHistory()\r\n\r\n  const setValuesByButtonHandler = () => {\r\n    props.setValuesByButton()\r\n    history.push('/counter2.1')\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Route exact path=\"/counter2.1\" render={() =>\r\n        <CounterDisplay type={'Counter21'}\r\n                        startValue={props.startValue}\r\n                        maxValue={props.maxValue}\r\n                        value={props.value}\r\n                        setValue={props.setValue}\r\n                        isMessage={props.isMessage}\r\n                        isError={props.isError}\r\n        />}/>\r\n      <Route exact path=\"/counter2.1/settings\" render={() =>\r\n        <CounterSettings startValue={props.startValue}\r\n                         startValueHandler={props.startValueHandler}\r\n                         maxValue={props.maxValue}\r\n                         maxValueHandler={props.maxValueHandler}\r\n                         value={props.value}\r\n                         setValuesByButton={setValuesByButtonHandler}\r\n                         isError={props.isError}\r\n        />}/>\r\n\r\n    </div>\r\n  )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport './App.scss';\r\nimport {Navbar} from './components/Navbar/Navbar';\r\nimport {Redirect, Route} from 'react-router-dom';\r\nimport {Counter2} from './components/Counter2/Counter2';\r\nimport {Counter21} from './components/Counter21';\r\n\r\nexport function App() {\r\n  let [startValue, setStartValue] = useState(0) // стартовое значение\r\n  let [maxValue, setMaxValue] = useState(5) // максимальное\r\n  let [value, setValue] = useState<number>(startValue) // выводимое значение счётчика\r\n  let [isMessage, setIsMessage] = useState(false) // показывать или нет сообщения вместо value\r\n  let [isError, setIsError] = useState(false) // есть ли ошибка\r\n\r\n  // при загрузке приложения стартовое, максимальное и текущее значения получаются из localstorage\r\n  useEffect(() => {\r\n    let localStorageStartValueStr = localStorage.getItem('startValue')\r\n    let localStorageMaxValueStr = localStorage.getItem('maxValue')\r\n    if (localStorageStartValueStr) {\r\n      setStartValue(JSON.parse(localStorageStartValueStr))\r\n      setValue(JSON.parse(localStorageStartValueStr))\r\n    }\r\n    if (localStorageMaxValueStr) {\r\n      setMaxValue(JSON.parse(localStorageMaxValueStr))\r\n    }\r\n  }, [])\r\n\r\n  // формирование ошибки\r\n  useEffect(() => {\r\n    let error = (maxValue <= startValue || startValue < 0)\r\n    setIsError(error)\r\n  }, [startValue, maxValue])\r\n\r\n  // обработчик для кнопки set в settings\r\n  const setValuesHandler = () => {\r\n    localStorage.setItem('startValue', JSON.stringify(startValue))\r\n    localStorage.setItem('maxValue', JSON.stringify(maxValue))\r\n    setIsMessage(false)\r\n    setValue(startValue)\r\n  }\r\n\r\n  // изменение стартового значения в settings\r\n  const startValueHandler = (value: number) => {\r\n    setIsMessage(true) // показ месседжа вместо value\r\n    setStartValue(value)\r\n  }\r\n\r\n  // изменение максимального значения в settings\r\n  const maxValueHandler = (value: number) => {\r\n    setIsMessage(true) // показ месседжа вместо value\r\n    setMaxValue(value)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar/>\r\n      <Route path={'/'} exact render={() => <Redirect to=\"/counter2\"/>}/>\r\n      <Route path=\"/counter2\" render={() => <Counter2\r\n        startValue={startValue}\r\n        maxValue={maxValue}\r\n        value={value}\r\n        setValue={setValue}\r\n        isMessage={isMessage}\r\n        isError={isError}\r\n        startValueHandler={startValueHandler}\r\n        maxValueHandler={maxValueHandler}\r\n        setValuesByButton={setValuesHandler}\r\n      />}\r\n      />\r\n      <Route path=\"/counter2.1\" render={() => <Counter21\r\n        startValue={startValue}\r\n        maxValue={maxValue}\r\n        value={value}\r\n        setValue={setValue}\r\n        isMessage={isMessage}\r\n        isError={isError}\r\n        startValueHandler={startValueHandler}\r\n        maxValueHandler={maxValueHandler}\r\n        setValuesByButton={setValuesHandler}\r\n      />}\r\n      />\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {App} from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>,document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__2mbK7\",\"navItem\":\"Navbar_navItem__T4AdP\",\"active\":\"Navbar_active__3LwV_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sText\":\"CounterSettings_sText__3cxRs\",\"error\":\"CounterSettings_error__1chCZ\"};"],"sourceRoot":""}